#!/usr/bin/env python3
# -*- python -*-
'''
analyse-gamma — Gamma adjustment analysis tool
Copyright © 2014  Mattias Andrée (maandree@member.fsf.org)

This library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library.  If not, see <http://www.gnu.org/licenses/>.
'''

import sys
import math

import libgamma

CMF_10DEG_XY = [(0.6472, 0.3506),  (0.6348, 0.3612),  (0.6225, 0.3710),  (0.6104, 0.3797),
                (0.5983, 0.3874),  (0.5864, 0.3940),  (0.5747, 0.3996),  (0.5632, 0.4041),
                (0.5519, 0.4077),  (0.5408, 0.4104),  (0.5300, 0.4123),  (0.5195, 0.4134),
                (0.5093, 0.4139),  (0.4995, 0.4138),  (0.4900, 0.4132),  (0.4808, 0.4122),
                (0.4720, 0.4108),  (0.4636, 0.4091),  (0.4555, 0.4071),  (0.4478, 0.4050),
                (0.4404, 0.4026),  (0.4333, 0.4002),  (0.4266, 0.3976),  (0.4202, 0.3950),
                (0.4140, 0.3923),  (0.4082, 0.3895),  (0.4026, 0.3868),  (0.3973, 0.3841),
                (0.3922, 0.3813),  (0.3873, 0.3786),  (0.3827, 0.3759),  (0.3783, 0.3733),
                (0.3741, 0.3707),  (0.3701, 0.3681),  (0.3662, 0.3656),  (0.3625, 0.3631),
                (0.3590, 0.3607),  (0.3557, 0.3583),  (0.3524, 0.3560),  (0.3494, 0.3538),
                (0.3464, 0.3516),  (0.3436, 0.3494),  (0.3409, 0.3473),  (0.3383, 0.3453),
                (0.3358, 0.3433),  (0.3334, 0.3413),  (0.3311, 0.3394),  (0.3289, 0.3376),
                (0.3268, 0.3358),  (0.3247, 0.3341),  (0.3228, 0.3324),  (0.3209, 0.3307),
                (0.3190, 0.3291),  (0.3173, 0.3275),  (0.3156, 0.3260),  (0.3140, 0.3245),
                (0.3124, 0.3231),  (0.3109, 0.3217),  (0.3094, 0.3203),  (0.3080, 0.3190),
                (0.3066, 0.3177),  (0.3053, 0.3164),  (0.3040, 0.3152),  (0.3028, 0.3140),
                (0.3016, 0.3128),  (0.3004, 0.3117),  (0.2993, 0.3106),  (0.2982, 0.3095),
                (0.2971, 0.3084),  (0.2961, 0.3074),  (0.2951, 0.3064),  (0.2942, 0.3054),
                (0.2932, 0.3044),  (0.2923, 0.3035),  (0.2914, 0.3026),  (0.2906, 0.3017),
                (0.2897, 0.3008),  (0.2889, 0.3000),  (0.2881, 0.2992),  (0.2874, 0.2983),
                (0.2866, 0.2976),  (0.2859, 0.2968),  (0.2852, 0.2960),  (0.2845, 0.2953),
                (0.2839, 0.2946),  (0.2832, 0.2939),  (0.2826, 0.2932),  (0.2820, 0.2925),
                (0.2813, 0.2918),  (0.2808, 0.2912),  (0.2802, 0.2905),  (0.2796, 0.2899),
                (0.2791, 0.2893),  (0.2785, 0.2887),  (0.2780, 0.2881),  (0.2775, 0.2876),
                (0.2770, 0.2870),  (0.2765, 0.2865),  (0.2761, 0.2859),  (0.2756, 0.2854),
                (0.2751, 0.2849),  (0.2747, 0.2844),  (0.2743, 0.2839),  (0.2738, 0.2834),
                (0.2734, 0.2829),  (0.2730, 0.2825),  (0.2726, 0.2820),  (0.2722, 0.2816),
                (0.2719, 0.2811),  (0.2715, 0.2807),  (0.2711, 0.2803),  (0.2708, 0.2799),
                (0.2704, 0.2794),  (0.2701, 0.2790),  (0.2697, 0.2786),  (0.2694, 0.2783),
                (0.2691, 0.2779),  (0.2688, 0.2775),  (0.2684, 0.2771),  (0.2681, 0.2768),
                (0.2678, 0.2764),  (0.2675, 0.2761),  (0.2673, 0.2757),  (0.2670, 0.2754),
                (0.2667, 0.2751),  (0.2664, 0.2747),  (0.2662, 0.2744),  (0.2659, 0.2741),
                (0.2656, 0.2738),  (0.2654, 0.2735),  (0.2651, 0.2732),  (0.2649, 0.2729),
                (0.2646, 0.2726),  (0.2644, 0.2723),  (0.2642, 0.2720),  (0.2639, 0.2718),
                (0.2637, 0.2715),  (0.2635, 0.2712),  (0.2633, 0.2709),  (0.2631, 0.2707),
                (0.2629, 0.2704),  (0.2626, 0.2702),  (0.2624, 0.2699),  (0.2622, 0.2697),
                (0.2620, 0.2694),  (0.2618, 0.2692),  (0.2617, 0.2690),  (0.2615, 0.2687),
                (0.2613, 0.2685),  (0.2611, 0.2683),  (0.2609, 0.2681),  (0.2607, 0.2678),
                (0.2606, 0.2676),  (0.2604, 0.2674),  (0.2602, 0.2672),  (0.2601, 0.2670),
                (0.2599, 0.2668),  (0.2597, 0.2666),  (0.2596, 0.2664),  (0.2594, 0.2662),
                (0.2593, 0.2660),  (0.2591, 0.2658),  (0.2590, 0.2656),  (0.2588, 0.2654),
                (0.2587, 0.2653),  (0.2585, 0.2651),  (0.2584, 0.2649),  (0.2582, 0.2647),
                (0.2581, 0.2645),  (0.2580, 0.2644),  (0.2578, 0.2642),  (0.2577, 0.2640),
                (0.2575, 0.2639),  (0.2574, 0.2637),  (0.2573, 0.2635),  (0.2572, 0.2634),
                (0.2570, 0.2632),  (0.2569, 0.2631),  (0.2568, 0.2629),  (0.2567, 0.2628),
                (0.2566, 0.2626),  (0.2564, 0.2625),  (0.2563, 0.2623),  (0.2562, 0.2622),
                (0.2561, 0.2620),  (0.2560, 0.2619),  (0.2559, 0.2618),  (0.2558, 0.2616),
                (0.2557, 0.2615),  (0.2555, 0.2613),  (0.2554, 0.2612),  (0.2553, 0.2611),
                (0.2552, 0.2609),  (0.2551, 0.2608),  (0.2550, 0.2607),  (0.2549, 0.2606),
                (0.2548, 0.2604),  (0.2547, 0.2603),  (0.2546, 0.2602),  (0.2546, 0.2601),
                (0.2545, 0.2600),  (0.2544, 0.2598),  (0.2543, 0.2597),  (0.2542, 0.2596),
                (0.2541, 0.2595),  (0.2540, 0.2594),  (0.2539, 0.2593),  (0.2538, 0.2591),
                (0.2537, 0.2590),  (0.2537, 0.2589),  (0.2536, 0.2588),  (0.2535, 0.2587),
                (0.2534, 0.2586),  (0.2533, 0.2585),  (0.2533, 0.2584),  (0.2532, 0.2583),
                (0.2531, 0.2582),  (0.2530, 0.2581),  (0.2529, 0.2580),  (0.2529, 0.2579),
                (0.2528, 0.2578),  (0.2527, 0.2577),  (0.2526, 0.2576),  (0.2526, 0.2575),
                (0.2525, 0.2574),  (0.2524, 0.2573),  (0.2524, 0.2572),  (0.2523, 0.2572),
                (0.2522, 0.2571),  (0.2521, 0.2570),  (0.2521, 0.2569),  (0.2520, 0.2568),
                (0.2519, 0.2567),  (0.2519, 0.2566),  (0.2518, 0.2565),  (0.2517, 0.2565),
                (0.2517, 0.2564),  (0.2516, 0.2563),  (0.2516, 0.2562),  (0.2515, 0.2561),
                (0.2514, 0.2560),  (0.2514, 0.2560),  (0.2513, 0.2559),  (0.2512, 0.2558),
                (0.2512, 0.2557),  (0.2511, 0.2557),  (0.2511, 0.2556),  (0.2510, 0.2555),
                (0.2510, 0.2554),  (0.2509, 0.2554),  (0.2508, 0.2553),  (0.2508, 0.2552),
                (0.2507, 0.2551),  (0.2507, 0.2551),  (0.2506, 0.2550),  (0.2506, 0.2549),
                (0.2505, 0.2548),  (0.2505, 0.2548),  (0.2504, 0.2547),  (0.2503, 0.2546),
                (0.2503, 0.2546),  (0.2502, 0.2545),  (0.2502, 0.2544),  (0.2501, 0.2544),
                (0.2501, 0.2543),  (0.2500, 0.2542),  (0.2500, 0.2542),  (0.2499, 0.2541),
                (0.2499, 0.2541),  (0.2499, 0.2540),  (0.2498, 0.2539),  (0.2498, 0.2539),
                (0.2497, 0.2538),  (0.2497, 0.2537),  (0.2496, 0.2537),  (0.2496, 0.2536),
                (0.2495, 0.2536),  (0.2495, 0.2535),  (0.2494, 0.2534),  (0.2494, 0.2534),
                (0.2493, 0.2533),  (0.2493, 0.2533),  (0.2493, 0.2532),  (0.2492, 0.2532),
                (0.2492, 0.2531),  (0.2491, 0.2530),  (0.2491, 0.2530),  (0.2490, 0.2529),
                (0.2490, 0.2529),  (0.2490, 0.2528),  (0.2489, 0.2528),  (0.2489, 0.2527),
                (0.2488, 0.2527),  (0.2488, 0.2526),  (0.2488, 0.2526),  (0.2487, 0.2525),
                (0.2487, 0.2525),  (0.2487, 0.2524),  (0.2486, 0.2524),  (0.2486, 0.2523),
                (0.2485, 0.2523),  (0.2485, 0.2522),  (0.2485, 0.2522),  (0.2484, 0.2521),
                (0.2484, 0.2521),  (0.2484, 0.2520),  (0.2483, 0.2520),  (0.2483, 0.2519),
                (0.2482, 0.2519),  (0.2482, 0.2518),  (0.2482, 0.2518),  (0.2481, 0.2517),
                (0.2481, 0.2517),  (0.2481, 0.2516),  (0.2480, 0.2516),  (0.2480, 0.2516),
                (0.2480, 0.2515),  (0.2479, 0.2515),  (0.2479, 0.2514),  (0.2479, 0.2514),
                (0.2478, 0.2513),  (0.2478, 0.2513),  (0.2478, 0.2513),  (0.2477, 0.2512),
                (0.2477, 0.2512),  (0.2477, 0.2511),  (0.2476, 0.2511),  (0.2476, 0.2510),
                (0.2476, 0.2510),  (0.2476, 0.2510),  (0.2475, 0.2509),  (0.2475, 0.2509),
                (0.2475, 0.2508),  (0.2474, 0.2508),  (0.2474, 0.2508),  (0.2474, 0.2507),
                (0.2473, 0.2507),  (0.2473, 0.2506),  (0.2473, 0.2506),  (0.2473, 0.2506),
                (0.2472, 0.2505),  (0.2472, 0.2505),  (0.2472, 0.2505),  (0.2471, 0.2504),
                (0.2471, 0.2504),  (0.2471, 0.2503),  (0.2471, 0.2503),  (0.2470, 0.2503),
                (0.2470, 0.2502),  (0.2470, 0.2502),  (0.2470, 0.2502),  (0.2469, 0.2501),
                (0.2469, 0.2501),  (0.2469, 0.2501),  (0.2468, 0.2500),  (0.2468, 0.2500),
                (0.2468, 0.2500),  (0.2468, 0.2499),  (0.2467, 0.2499),  (0.2467, 0.2498),
                (0.2467, 0.2498),  (0.2467, 0.2498),  (0.2466, 0.2497),  (0.2466, 0.2497),
                (0.2466, 0.2497),  (0.2466, 0.2497),  (0.2465, 0.2496),  (0.2465, 0.2496),
                (0.2465, 0.2496),  (0.2465, 0.2495),  (0.2465, 0.2495),  (0.2464, 0.2495),
                (0.2464, 0.2494),  (0.2464, 0.2494),  (0.2464, 0.2494),  (0.2463, 0.2493),
                (0.2463, 0.2493),  (0.2463, 0.2493),  (0.2463, 0.2492),  (0.2462, 0.2492),
                (0.2462, 0.2492),  (0.2462, 0.2492),  (0.2462, 0.2491),  (0.2462, 0.2491),
                (0.2461, 0.2491),  (0.2461, 0.2490),  (0.2461, 0.2490),  (0.2461, 0.2490),
                (0.2460, 0.2490),  (0.2460, 0.2489),  (0.2460, 0.2489)]
CMF_10DEG_STEP = 100
CMF_10DEG_MIN = 1000


LINEAR_TO_CIEXYZ_MATRIX = [[0.4124564, 0.3575761, 0.1804375],
                           [0.2126729, 0.7151522, 0.0721750],
                           [0.0193339, 0.1191920, 0.9503041]]
'''
Multiplication matrix to convert from linear RGB to CIE xyY
'''


def matrix_mul_vector(matrix, vector):
    '''
    Multiplies a matrix with a vector
    
    @param   matrix:list<list<int>>  The matrix
    @param   vector:list<int>        The vector
    @return  :list<int>              The resulting vector
    '''
    return [sum([r * v for r, v in zip(row, vector)]) for row in matrix]


def ciexyz_to_ciexyy(X, Y, Z):
    '''
    Convert CIE XYZ to CIE xyY
    
    @param   X:float                 The X parameter
    @param   Y:float                 The Y parameter
    @param   Z:float                 The Z parameter
    @return  :[float, float, float]  The x, y and Y parameters
    '''
    s = X + Y + Z
    return [X / s, Y / s, Y] if not s == 0 else [0, 0, 0]


def linear_to_ciexyz(r, g, b):
    '''
    Convert [0, 1] linear RGB to CIE XYZ
    
    @param   r:float                 The red component
    @param   g:float                 The green component
    @param   b:float                 The blue component
    @return  :[float, float, float]  The X, Y and Z parameters
    '''
    return matrix_mul_vector(LINEAR_TO_CIEXYZ_MATRIX, [r, g, b])


def standard_to_linear(*colour):
    '''
    Convert [0, 1] sRGB to [0, 1] linear RGB
    
    @param   colour:*float           The red component, the green component, and the blue component
    @return  :[float, float, float]  The red, green and blue components
    '''
    return [c / 12.92 if c <= 0.04045 else ((c + 0.055) / (1 + 0.055)) ** 2.4 for c in colour]


def srgb_to_ciexyy(r, g, b):
    '''
    Convert [0, 1] sRGB to CIE xyY
    
    @param   r:float                 The red component
    @param   g:float                 The green component
    @param   b:float                 The blue component
    @return  :[float, float, float]  The x, y and Y parameters
    '''
    if r == g == b == 0:
        return (0.312857, 0.328993, 0)
    return ciexyz_to_ciexyy(*linear_to_ciexyz(*standard_to_linear(r, g, b)))


def analyse_monotonicity(ramp):
    increasing          = all(ramp[i - 1] <= ramp[i] for i in range(1, len(ramp)))
    strictly_increasing = all(ramp[i - 1] <  ramp[i] for i in range(1, len(ramp)))
    decreasing          = all(ramp[i - 1] >= ramp[i] for i in range(1, len(ramp)))
    strictly_decreasing = all(ramp[i - 1] >  ramp[i] for i in range(1, len(ramp)))
    
    if increasing and decreasing:  return                'flat'
    elif strictly_increasing:      return 'strictly increasing'
    elif          increasing:      return          'increasing'
    elif strictly_decreasing:      return 'strictly decreasing'
    elif          decreasing:      return          'decreasing'
    else:                          return       'non-monotonic'


def print_ramps(all_ramps):
    for part, crtc, info, ramps in all_ramps:
        print('screen=%i, crtc=%i' % (part, crtc), end = '');
        if (not info.connector_name_error) and info.connector_name:
            print(', connector=%s' % info.connector_name, end = '');
        print()
        
        r_monotonicity = analyse_monotonicity(ramps.red)
        g_monotonicity = analyse_monotonicity(ramps.green)
        b_monotonicity = analyse_monotonicity(ramps.blue)
        
        ramps.red[:]   = sorted(ramps.red)
        ramps.green[:] = sorted(ramps.green)
        ramps.blue[:]  = sorted(ramps.blue)
        
        f = lambda r, i : (r[len(r) * i // 4] + r[len(r) * i // 4 - 1]) / 2
        r_1, r_2, r_3 = f(ramps.red,   1), f(ramps.red,   2), f(ramps.red,   3)
        g_1, g_2, g_3 = f(ramps.green, 1), f(ramps.green, 2), f(ramps.green, 3)
        b_1, b_2, b_3 = f(ramps.blue,  1), f(ramps.blue,  2), f(ramps.blue,  3)
        A, B, C = 1 / 4, 2 / 4, 3 / 4
        
        def solve_gamma(a, b, c):
            try:
                y = (b - a) / (c - b)
            except:
                return None
            f = lambda x : (B ** x - A ** x) / (C ** x - B ** x)
            if y == 1:
                return 1
            if y > 1:
                g_max = 1
                g_min = g_max / 2
                while y >= f(g_min):
                    g_min /= 2
            else:
                g_min = 1
                g_max = g_min * 2
                while y <= f(g_max):
                    g_max *= 2
            for i in range(100):
                g = (g_min + g_max) / 2
                t = f(g)
                if t == y:
                    break
                if y < t:
                    g_min = g
                else:
                    g_max = g
            return round(1 / g, 2) ## Programs do not allow higher precision
        
        r_gamma = solve_gamma(r_1, r_2, r_3)
        g_gamma = solve_gamma(g_1, g_2, g_3)
        b_gamma = solve_gamma(b_1, b_2, b_3)
        
        r_brightness = min(ramps.red)
        g_brightness = min(ramps.green)
        b_brightness = min(ramps.blue)
        
        r_max = (max(ramps.red)   - r_brightness) ** r_gamma
        g_max = (max(ramps.green) - g_brightness) ** g_gamma
        b_max = (max(ramps.blue)  - b_brightness) ** b_gamma
        
        # Assume constrast = 1 to determine for which
        # channels the temperature modifier is 1, so
        # we can get the real contrast which we assume
        # is shared for all channels.
        r_off = ((1 - r_brightness) ** r_gamma) / r_max
        g_off = ((1 - g_brightness) ** g_gamma) / g_max
        b_off = ((1 - b_brightness) ** b_gamma) / b_max
        
        min_off = min([r_off, g_off, b_off])
        if   r_off == min_off:  contrast = max(ramps.red)
        elif g_off == min_off:  contrast = max(ramps.green)
        else:                   contrast = max(ramps.blue)
        
        # Cancel out brightness, contrast and gamma, leave in temperature
        f = lambda y, b, g : ((y - b) / (contrast - b)) ** g
        ramps.red[:]   = [f(y, r_brightness, r_gamma) for y in ramps.red]
        ramps.green[:] = [f(y, g_brightness, g_gamma) for y in ramps.green]
        ramps.blue[:]  = [f(y, b_brightness, b_gamma) for y in ramps.blue]
        
        # Calculate channel-wise calculation error
        r_max, r_n = max(ramps.red),   len(ramps.red)
        g_max, g_n = max(ramps.green), len(ramps.green)
        b_max, b_n = max(ramps.blue),  len(ramps.blue)
        r_error = [x / r_max - i / r_n for i, x in enumerate(ramps.red)]
        g_error = [x / g_max - i / g_n for i, x in enumerate(ramps.green)]
        b_error = [x / b_max - i / b_n for i, x in enumerate(ramps.blue)]
        r_error = sum([x ** 2 for x in r_error]) / len(ramps.red)
        g_error = sum([x ** 2 for x in g_error]) / len(ramps.green)
        b_error = sum([x ** 2 for x in b_error]) / len(ramps.blue)
        
        # Calculate temperature
        (x, y, _) = srgb_to_ciexyy(max(ramps.red), max(ramps.green), max(ramps.blue))
        test = [(i, (x - X)**2 + (y - Y)**2) for i, (X, Y) in enumerate(CMF_10DEG_XY)]
        test.sort(key = lambda x : x[1]);
        test = test[:2]
        ((close_x, close_y), close_t) = CMF_10DEG_XY[test[0][0]], test[0][0]
        ((far_x, far_y), far_t)       = CMF_10DEG_XY[test[1][0]], test[1][0]
        f = lambda x : x * CMF_10DEG_STEP + CMF_10DEG_MIN
        temp_x = (x - far_x) / (close_x - far_x) + far_t
        temp_y = (y - far_y) / (close_y - far_y) + far_t
        temp = f((temp_x + temp_y) / 2)
        temp_error = abs(temp_x - temp_y)
        
        
        g = lambda x : ('%1.2f' % x) if x else 'indeterminable'
        print('  red channel:')
        print('    style:             %s'    % r_monotonicity)
        print('    brightness:        %1.2f' % r_brightness)
        print('    gamma:             %s'    % g(r_gamma))
        print('    error:             %1.4f' % r_error)
        
        print('  green channel:')
        print('    style:             %s'    % g_monotonicity)
        print('    brightness:        %1.2f' % g_brightness)
        print('    gamma:             %s'    % g(g_gamma))
        print('    error:             %1.4f' % g_error)
        
        print('  blue channel:')
        print('    style:             %s'    % b_monotonicity)
        print('    brightness:        %1.2f' % b_brightness)
        print('    gamma:             %s'    % g(b_gamma))
        print('    error:             %1.4f' % b_error)
        
        print('  combined:')
        print('    contrast:          %1.2f' % contrast)
        print('    temperature:       %.0f'  % temp)
        print('    temperature error: %1.4f' % temp_error)
        
        print()


methods = libgamma.list_methods(0)
if len(methods) == 0:
    print('Cannot find any backend for reading the current gamma ramps.', file = sys.stderr)
    sys.exit(1)

for method in methods:
    all_ramps = []
    can_read = True
    site = libgamma.Site(method)
    for part_i in range(site.partitions_available):
        if not can_read:
            break
        part = libgamma.Partition(site, part_i)
        for crtc_i in range(part.crtcs_available):
            crtc = libgamma.CRTC(part, crtc_i)
            (info, _) = crtc.information(~0)
            r, g, b = info.red_gamma_size, info.green_gamma_size, info.blue_gamma_size
            if info.gamma_size_error:
                del crtc
                can_read = False
                break
            ramps = libgamma.GammaRamps(r, g, b, depth = -2)
            try:
                crtc.get_gamma(ramps)
                all_ramps.append((part_i, crtc_i, info, ramps))
            except:
                can_read = False
            del ramps
            del crtc
        del part
    del site
    if can_read:
        print_ramps(all_ramps)
        del all_ramps
        sys.exit(0)
    del all_ramps

print('Cannot read current gamma ramps.', file = sys.stderr)
sys.exit(1)
